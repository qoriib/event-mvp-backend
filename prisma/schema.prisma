generator client {
    provider = "prisma-client-js"
    seed     = "ts-node prisma/seed.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ORGANIZER
    CUSTOMER
}

enum TxStatus {
    WAITING_PAYMENT
    WAITING_CONFIRMATION
    DONE
    REJECTED
    EXPIRED
    CANCELED
}

model User {
    id            String            @id @default(cuid())
    email         String            @unique
    passwordHash  String
    name          String
    role          Role              @default(CUSTOMER)
    pointsBalance Int               @default(0) // IDR
    organizer     OrganizerProfile?
    reviews       Review[]
    transactions  Transaction[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
}

model OrganizerProfile {
    id           String  @id @default(cuid())
    userId       String  @unique
    user         User    @relation(fields: [userId], references: [id])
    displayName  String
    bio          String?
    events       Event[]
    ratingsAvg   Float   @default(0)
    ratingsCount Int     @default(0)
}

model Event {
    id             String           @id @default(cuid())
    organizerId    String
    organizer      OrganizerProfile @relation(fields: [organizerId], references: [id])
    title          String
    description    String?
    category       String?
    location       String
    startAt        DateTime
    endAt          DateTime
    isPaid         Boolean          @default(false)
    capacity       Int
    seatsAvailable Int
    ticketTypes    TicketType[]
    promotions     Promotion[]
    tickets        Ticket[]
    reviews        Review[]
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    Transaction    Transaction[]

    @@index([startAt])
    @@index([category])
    @@index([location])
}

model TicketType {
    id              String            @id @default(cuid())
    eventId         String
    event           Event             @relation(fields: [eventId], references: [id])
    name            String
    priceIDR        Int // 0 for free
    quota           Int?
    createdAt       DateTime          @default(now())
    TransactionItem TransactionItem[]
    Ticket          Ticket[]
}

model Promotion {
    id          String   @id @default(cuid())
    eventId     String
    event       Event    @relation(fields: [eventId], references: [id])
    code        String
    type        String // "PERCENT" | "FLAT"
    value       Int
    minSpendIDR Int      @default(0)
    startsAt    DateTime
    endsAt      DateTime
    maxUses     Int?
    usedCount   Int      @default(0)

    @@unique([eventId, code])
}

model Transaction {
    id               String            @id @default(cuid())
    userId           String
    user             User              @relation(fields: [userId], references: [id])
    eventId          String
    event            Event             @relation(fields: [eventId], references: [id])
    status           TxStatus          @default(WAITING_PAYMENT)
    totalBeforeIDR   Int
    pointsUsedIDR    Int               @default(0)
    promoCode        String?
    promoDiscountIDR Int               @default(0)
    totalPayableIDR  Int
    paymentProofUrl  String?
    paymentProofAt   DateTime?
    expiresAt        DateTime // createdAt + 2h
    decisionDueAt    DateTime? // paymentProofAt + 3d
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    items            TransactionItem[]
    tickets          Ticket[]

    @@index([status])
    @@index([expiresAt])
    @@index([decisionDueAt])
}

model TransactionItem {
    id            String      @id @default(cuid())
    transactionId String
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    ticketTypeId  String?
    ticketType    TicketType? @relation(fields: [ticketTypeId], references: [id])
    qty           Int
    unitPriceIDR  Int
    lineTotalIDR  Int
}

model Ticket {
    id            String      @id @default(cuid())
    eventId       String
    event         Event       @relation(fields: [eventId], references: [id])
    transactionId String
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    ticketTypeId  String?
    ticketType    TicketType? @relation(fields: [ticketTypeId], references: [id])
    ownerUserId   String?
    checkedInAt   DateTime?
    createdAt     DateTime    @default(now())
}

model Review {
    id        String   @id @default(cuid())
    eventId   String
    event     Event    @relation(fields: [eventId], references: [id])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    rating    Int
    comment   String?
    createdAt DateTime @default(now())

    @@unique([eventId, userId])
}
